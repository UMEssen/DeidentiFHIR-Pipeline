<?xml version='1.0' encoding='UTF-8'?><wsdl:definitions xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:tns="http://cm2.ttp.ganimed.icmvc.emau.org/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:ns1="http://schemas.xmlsoap.org/soap/http" name="GICSServiceImplService" targetNamespace="http://cm2.ttp.ganimed.icmvc.emau.org/">
  <wsdl:types>
    <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://cm2.ttp.ganimed.icmvc.emau.org/" attributeFormDefault="unqualified" elementFormDefault="unqualified" targetNamespace="http://cm2.ttp.ganimed.icmvc.emau.org/" version="1.0">
      <xs:element name="addAlias" type="tns:addAlias"/>
      <xs:element name="addAliasResponse" type="tns:addAliasResponse"/>
      <xs:element name="addConsent" type="tns:addConsent"/>
      <xs:element name="addConsentResponse" type="tns:addConsentResponse"/>
      <xs:element name="addScanToConsent" type="tns:addScanToConsent"/>
      <xs:element name="addScanToConsentResponse" type="tns:addScanToConsentResponse"/>
      <xs:element name="addSignerIdToConsent" type="tns:addSignerIdToConsent"/>
      <xs:element name="addSignerIdToConsentResponse" type="tns:addSignerIdToConsentResponse"/>
      <xs:element name="addSignerIdToSignerId" type="tns:addSignerIdToSignerId"/>
      <xs:element name="addSignerIdToSignerIdResponse" type="tns:addSignerIdToSignerIdResponse"/>
      <xs:element name="countConsentsForDomainWithFilter" type="tns:countConsentsForDomainWithFilter"/>
      <xs:element name="countConsentsForDomainWithFilterResponse" type="tns:countConsentsForDomainWithFilterResponse"/>
      <xs:element name="deactivateAlias" type="tns:deactivateAlias"/>
      <xs:element name="deactivateAliasResponse" type="tns:deactivateAliasResponse"/>
      <xs:element name="getAliasesForSignerId" type="tns:getAliasesForSignerId"/>
      <xs:element name="getAliasesForSignerIdResponse" type="tns:getAliasesForSignerIdResponse"/>
      <xs:element name="getAliasesForSignerIds" type="tns:getAliasesForSignerIds"/>
      <xs:element name="getAliasesForSignerIdsResponse" type="tns:getAliasesForSignerIdsResponse"/>
      <xs:element name="getAllConsentedIdsFor" type="tns:getAllConsentedIdsFor"/>
      <xs:element name="getAllConsentedIdsForResponse" type="tns:getAllConsentedIdsForResponse"/>
      <xs:element name="getAllConsentsForConsentTemplate" type="tns:getAllConsentsForConsentTemplate"/>
      <xs:element name="getAllConsentsForConsentTemplateResponse" type="tns:getAllConsentsForConsentTemplateResponse"/>
      <xs:element name="getAllConsentsForDomain" type="tns:getAllConsentsForDomain"/>
      <xs:element name="getAllConsentsForDomainResponse" type="tns:getAllConsentsForDomainResponse"/>
      <xs:element name="getAllConsentsForDomainWithoutScan" type="tns:getAllConsentsForDomainWithoutScan"/>
      <xs:element name="getAllConsentsForDomainWithoutScanResponse" type="tns:getAllConsentsForDomainWithoutScanResponse"/>
      <xs:element name="getAllConsentsForSignerIds" type="tns:getAllConsentsForSignerIds"/>
      <xs:element name="getAllConsentsForSignerIdsResponse" type="tns:getAllConsentsForSignerIdsResponse"/>
      <xs:element name="getAllIdsForSignerIdType" type="tns:getAllIdsForSignerIdType"/>
      <xs:element name="getAllIdsForSignerIdTypeResponse" type="tns:getAllIdsForSignerIdTypeResponse"/>
      <xs:element name="getConsent" type="tns:getConsent"/>
      <xs:element name="getConsentDates" type="tns:getConsentDates"/>
      <xs:element name="getConsentDatesResponse" type="tns:getConsentDatesResponse"/>
      <xs:element name="getConsentLight" type="tns:getConsentLight"/>
      <xs:element name="getConsentLightResponse" type="tns:getConsentLightResponse"/>
      <xs:element name="getConsentResponse" type="tns:getConsentResponse"/>
      <xs:element name="getConsentStatusType" type="tns:getConsentStatusType"/>
      <xs:element name="getConsentStatusTypeFromExcludingToExcluding" type="tns:getConsentStatusTypeFromExcludingToExcluding"/>
      <xs:element name="getConsentStatusTypeFromExcludingToExcludingResponse" type="tns:getConsentStatusTypeFromExcludingToExcludingResponse"/>
      <xs:element name="getConsentStatusTypeFromExcludingToIncluding" type="tns:getConsentStatusTypeFromExcludingToIncluding"/>
      <xs:element name="getConsentStatusTypeFromExcludingToIncludingResponse" type="tns:getConsentStatusTypeFromExcludingToIncludingResponse"/>
      <xs:element name="getConsentStatusTypeFromIncludingToExcluding" type="tns:getConsentStatusTypeFromIncludingToExcluding"/>
      <xs:element name="getConsentStatusTypeFromIncludingToExcludingResponse" type="tns:getConsentStatusTypeFromIncludingToExcludingResponse"/>
      <xs:element name="getConsentStatusTypeFromIncludingToIncluding" type="tns:getConsentStatusTypeFromIncludingToIncluding"/>
      <xs:element name="getConsentStatusTypeFromIncludingToIncludingResponse" type="tns:getConsentStatusTypeFromIncludingToIncludingResponse"/>
      <xs:element name="getConsentStatusTypeResponse" type="tns:getConsentStatusTypeResponse"/>
      <xs:element name="getConsentTemplate" type="tns:getConsentTemplate"/>
      <xs:element name="getConsentTemplateResponse" type="tns:getConsentTemplateResponse"/>
      <xs:element name="getConsentsForDomainPaginated" type="tns:getConsentsForDomainPaginated"/>
      <xs:element name="getConsentsForDomainPaginatedResponse" type="tns:getConsentsForDomainPaginatedResponse"/>
      <xs:element name="getCurrentConsentForSignerIdsAndCT" type="tns:getCurrentConsentForSignerIdsAndCT"/>
      <xs:element name="getCurrentConsentForSignerIdsAndCTResponse" type="tns:getCurrentConsentForSignerIdsAndCTResponse"/>
      <xs:element name="getCurrentConsentTemplate" type="tns:getCurrentConsentTemplate"/>
      <xs:element name="getCurrentConsentTemplateResponse" type="tns:getCurrentConsentTemplateResponse"/>
      <xs:element name="getCurrentPolicyStatesForSignerIds" type="tns:getCurrentPolicyStatesForSignerIds"/>
      <xs:element name="getCurrentPolicyStatesForSignerIdsResponse" type="tns:getCurrentPolicyStatesForSignerIdsResponse"/>
      <xs:element name="getDomain" type="tns:getDomain"/>
      <xs:element name="getDomainResponse" type="tns:getDomainResponse"/>
      <xs:element name="getMappedTemplatesForSignerId" type="tns:getMappedTemplatesForSignerId"/>
      <xs:element name="getMappedTemplatesForSignerIdResponse" type="tns:getMappedTemplatesForSignerIdResponse"/>
      <xs:element name="getModule" type="tns:getModule"/>
      <xs:element name="getModuleResponse" type="tns:getModuleResponse"/>
      <xs:element name="getObjectByFhirID" type="tns:getObjectByFhirID"/>
      <xs:element name="getObjectByFhirIDResponse" type="tns:getObjectByFhirIDResponse"/>
      <xs:element name="getPolicy" type="tns:getPolicy"/>
      <xs:element name="getPolicyResponse" type="tns:getPolicyResponse"/>
      <xs:element name="getPolicyStatesForPolicyAndSignerIds" type="tns:getPolicyStatesForPolicyAndSignerIds"/>
      <xs:element name="getPolicyStatesForPolicyAndSignerIdsResponse" type="tns:getPolicyStatesForPolicyAndSignerIdsResponse"/>
      <xs:element name="getPolicyStatesForPolicyNameAndSignerIds" type="tns:getPolicyStatesForPolicyNameAndSignerIds"/>
      <xs:element name="getPolicyStatesForPolicyNameAndSignerIdsResponse" type="tns:getPolicyStatesForPolicyNameAndSignerIdsResponse"/>
      <xs:element name="getPolicyStatesForSignerIds" type="tns:getPolicyStatesForSignerIds"/>
      <xs:element name="getPolicyStatesForSignerIdsResponse" type="tns:getPolicyStatesForSignerIdsResponse"/>
      <xs:element name="getQCHistoryForConsent" type="tns:getQCHistoryForConsent"/>
      <xs:element name="getQCHistoryForConsentResponse" type="tns:getQCHistoryForConsentResponse"/>
      <xs:element name="getSignerIdType" type="tns:getSignerIdType"/>
      <xs:element name="getSignerIdTypeResponse" type="tns:getSignerIdTypeResponse"/>
      <xs:element name="getSignerIdsForAlias" type="tns:getSignerIdsForAlias"/>
      <xs:element name="getSignerIdsForAliasResponse" type="tns:getSignerIdsForAliasResponse"/>
      <xs:element name="getTemplatesWithPolicies" type="tns:getTemplatesWithPolicies"/>
      <xs:element name="getTemplatesWithPoliciesResponse" type="tns:getTemplatesWithPoliciesResponse"/>
      <xs:element name="isConsented" type="tns:isConsented"/>
      <xs:element name="isConsentedFromExcludingToExcluding" type="tns:isConsentedFromExcludingToExcluding"/>
      <xs:element name="isConsentedFromExcludingToExcludingResponse" type="tns:isConsentedFromExcludingToExcludingResponse"/>
      <xs:element name="isConsentedFromExcludingToIncluding" type="tns:isConsentedFromExcludingToIncluding"/>
      <xs:element name="isConsentedFromExcludingToIncludingResponse" type="tns:isConsentedFromExcludingToIncludingResponse"/>
      <xs:element name="isConsentedFromIncludingToExcluding" type="tns:isConsentedFromIncludingToExcluding"/>
      <xs:element name="isConsentedFromIncludingToExcludingResponse" type="tns:isConsentedFromIncludingToExcludingResponse"/>
      <xs:element name="isConsentedFromIncludingToIncluding" type="tns:isConsentedFromIncludingToIncluding"/>
      <xs:element name="isConsentedFromIncludingToIncludingResponse" type="tns:isConsentedFromIncludingToIncludingResponse"/>
      <xs:element name="isConsentedResponse" type="tns:isConsentedResponse"/>
      <xs:element name="listConsentTemplates" type="tns:listConsentTemplates"/>
      <xs:element name="listConsentTemplatesResponse" type="tns:listConsentTemplatesResponse"/>
      <xs:element name="listCurrentConsentTemplates" type="tns:listCurrentConsentTemplates"/>
      <xs:element name="listCurrentConsentTemplatesResponse" type="tns:listCurrentConsentTemplatesResponse"/>
      <xs:element name="listDomains" type="tns:listDomains"/>
      <xs:element name="listDomainsResponse" type="tns:listDomainsResponse"/>
      <xs:element name="listModules" type="tns:listModules"/>
      <xs:element name="listModulesResponse" type="tns:listModulesResponse"/>
      <xs:element name="listPolicies" type="tns:listPolicies"/>
      <xs:element name="listPoliciesResponse" type="tns:listPoliciesResponse"/>
      <xs:element name="listSignerIdTypes" type="tns:listSignerIdTypes"/>
      <xs:element name="listSignerIdTypesResponse" type="tns:listSignerIdTypesResponse"/>
      <xs:element name="refuseConsent" type="tns:refuseConsent"/>
      <xs:element name="refuseConsentResponse" type="tns:refuseConsentResponse"/>
      <xs:element name="removeScanFromConsent" type="tns:removeScanFromConsent"/>
      <xs:element name="removeScanFromConsentResponse" type="tns:removeScanFromConsentResponse"/>
      <xs:element name="setQCForConsent" type="tns:setQCForConsent"/>
      <xs:element name="setQCForConsentResponse" type="tns:setQCForConsentResponse"/>
      <xs:element name="updateConsentInUse" type="tns:updateConsentInUse"/>
      <xs:element name="updateConsentInUseResponse" type="tns:updateConsentInUseResponse"/>
      <xs:element name="validateConsent" type="tns:validateConsent"/>
      <xs:element name="validateConsentResponse" type="tns:validateConsentResponse"/>
      <xs:complexType name="isConsentedFromExcludingToExcluding">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" name="signerIds" type="tns:signerIdDTO"/>
          <xs:element name="domainName" type="xs:string"/>
          <xs:element name="policyName" type="xs:string"/>
          <xs:element name="versionFrom" type="xs:string"/>
          <xs:element name="versionTo" type="xs:string"/>
          <xs:element name="config" type="tns:checkConsentConfig"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="signerIdDTO">
        <xs:complexContent>
          <xs:extension base="tns:fhirIdDTO">
            <xs:sequence>
              <xs:element minOccurs="0" name="creationDate" type="xs:dateTime"/>
              <xs:element minOccurs="0" name="id" type="xs:string"/>
              <xs:element minOccurs="0" name="idType" type="xs:string"/>
              <xs:element name="orderNumber" type="xs:int"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType abstract="true" name="fhirIdDTO">
        <xs:sequence>
          <xs:element minOccurs="0" name="fhirID" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="checkConsentConfig">
        <xs:sequence>
          <xs:element minOccurs="0" name="idMatchingType" type="tns:idMatchingType"/>
          <xs:element name="ignoreVersionNumber" type="xs:boolean"/>
          <xs:element minOccurs="0" name="requestDate" type="xs:dateTime"/>
          <xs:element name="unknownStateIsConsideredAsDecline" type="xs:boolean"/>
          <xs:element name="useAliases" type="xs:boolean"/>
          <xs:element name="useHistoricalData" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="isConsentedFromExcludingToExcludingResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="listConsentTemplates">
        <xs:sequence>
          <xs:element name="domainName" type="xs:string"/>
          <xs:element name="onlyFinal" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="listConsentTemplatesResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" nillable="true">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="consentTemplates" type="tns:consentTemplateDTO"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="consentTemplateDTO">
        <xs:complexContent>
          <xs:extension base="tns:fhirIdDTO">
            <xs:sequence>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="assignedModules" nillable="true" type="tns:assignedModuleDTO"/>
              <xs:element minOccurs="0" name="comment" type="xs:string"/>
              <xs:element minOccurs="0" name="creationDate" type="xs:dateTime"/>
              <xs:element minOccurs="0" name="expirationProperties" type="tns:expirationPropertiesDTO"/>
              <xs:element minOccurs="0" name="externProperties" type="xs:string"/>
              <xs:element name="finalised" type="xs:boolean"/>
              <xs:element minOccurs="0" name="footer" type="xs:string"/>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="freeTextDefs" nillable="true" type="tns:freeTextDefDTO"/>
              <xs:element minOccurs="0" name="header" type="xs:string"/>
              <xs:element minOccurs="0" name="key" type="tns:consentTemplateKeyDTO"/>
              <xs:element minOccurs="0" name="label" type="xs:string"/>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="mappedConsentTemplates" nillable="true" type="tns:consentTemplateKeyDTO"/>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="mappedRefusalTemplates" nillable="true" type="tns:consentTemplateKeyDTO"/>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="mappedRevocationTemplates" nillable="true" type="tns:consentTemplateKeyDTO"/>
              <xs:element minOccurs="0" name="scanBase64" type="xs:string"/>
              <xs:element minOccurs="0" name="scanFileType" type="xs:string"/>
              <xs:element minOccurs="0" name="structure" type="tns:consentTemplateStructureDTO"/>
              <xs:element minOccurs="0" name="title" type="xs:string"/>
              <xs:element minOccurs="0" name="type" type="tns:consentTemplateType"/>
              <xs:element minOccurs="0" name="updateDate" type="xs:dateTime"/>
              <xs:element minOccurs="0" name="versionLabel" type="xs:string"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="assignedModuleDTO">
        <xs:complexContent>
          <xs:extension base="tns:fhirIdDTO">
            <xs:sequence>
              <xs:element minOccurs="0" name="comment" type="xs:string"/>
              <xs:element minOccurs="0" name="defaultConsentStatus" type="tns:consentStatus"/>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="displayCheckboxes" nillable="true" type="tns:consentStatus"/>
              <xs:element minOccurs="0" name="expirationProperties" type="tns:expirationPropertiesDTO"/>
              <xs:element minOccurs="0" name="externProperties" type="xs:string"/>
              <xs:element name="mandatory" type="xs:boolean"/>
              <xs:element minOccurs="0" name="module" type="tns:moduleDTO"/>
              <xs:element name="orderNumber" type="xs:int"/>
              <xs:element minOccurs="0" name="parent" type="tns:moduleKeyDTO"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="expirationPropertiesDTO">
        <xs:sequence>
          <xs:element minOccurs="0" name="fixedExpirationDate" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="validPeriod" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="moduleDTO">
        <xs:complexContent>
          <xs:extension base="tns:fhirIdDTO">
            <xs:sequence>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="assignedPolicies" nillable="true" type="tns:assignedPolicyDTO"/>
              <xs:element minOccurs="0" name="comment" type="xs:string"/>
              <xs:element minOccurs="0" name="creationDate" type="xs:dateTime"/>
              <xs:element minOccurs="0" name="externProperties" type="xs:string"/>
              <xs:element name="finalised" type="xs:boolean"/>
              <xs:element minOccurs="0" name="key" type="tns:moduleKeyDTO"/>
              <xs:element minOccurs="0" name="label" type="xs:string"/>
              <xs:element minOccurs="0" name="shortText" type="xs:string"/>
              <xs:element minOccurs="0" name="text" type="xs:string"/>
              <xs:element minOccurs="0" name="title" type="xs:string"/>
              <xs:element minOccurs="0" name="updateDate" type="xs:dateTime"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="assignedPolicyDTO">
        <xs:complexContent>
          <xs:extension base="tns:fhirIdDTO">
            <xs:sequence>
              <xs:element minOccurs="0" name="comment" type="xs:string"/>
              <xs:element minOccurs="0" name="expirationProperties" type="tns:expirationPropertiesDTO"/>
              <xs:element minOccurs="0" name="externProperties" type="xs:string"/>
              <xs:element minOccurs="0" name="policy" type="tns:policyDTO"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="policyDTO">
        <xs:complexContent>
          <xs:extension base="tns:fhirIdDTO">
            <xs:sequence>
              <xs:element minOccurs="0" name="comment" type="xs:string"/>
              <xs:element minOccurs="0" name="creationDate" type="xs:dateTime"/>
              <xs:element minOccurs="0" name="externProperties" type="xs:string"/>
              <xs:element name="finalised" type="xs:boolean"/>
              <xs:element minOccurs="0" name="key" type="tns:policyKeyDTO"/>
              <xs:element minOccurs="0" name="label" type="xs:string"/>
              <xs:element minOccurs="0" name="updateDate" type="xs:dateTime"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="policyKeyDTO">
        <xs:sequence>
          <xs:element minOccurs="0" name="domainName" type="xs:string"/>
          <xs:element minOccurs="0" name="name" type="xs:string"/>
          <xs:element minOccurs="0" name="version" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="moduleKeyDTO">
        <xs:sequence>
          <xs:element minOccurs="0" name="domainName" type="xs:string"/>
          <xs:element minOccurs="0" name="name" type="xs:string"/>
          <xs:element minOccurs="0" name="version" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="freeTextDefDTO">
        <xs:complexContent>
          <xs:extension base="tns:fhirIdDTO">
            <xs:sequence>
              <xs:element minOccurs="0" name="comment" type="xs:string"/>
              <xs:element minOccurs="0" name="converterString" type="xs:string"/>
              <xs:element minOccurs="0" name="creationDate" type="xs:dateTime"/>
              <xs:element minOccurs="0" name="externProperties" type="xs:string"/>
              <xs:element name="finalised" type="xs:boolean"/>
              <xs:element minOccurs="0" name="label" type="xs:string"/>
              <xs:element minOccurs="0" name="name" type="xs:string"/>
              <xs:element name="pos" type="xs:int"/>
              <xs:element name="required" type="xs:boolean"/>
              <xs:element minOccurs="0" name="type" type="tns:freeTextType"/>
              <xs:element minOccurs="0" name="updateDate" type="xs:dateTime"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="consentTemplateKeyDTO">
        <xs:sequence>
          <xs:element minOccurs="0" name="domainName" type="xs:string"/>
          <xs:element minOccurs="0" name="name" type="xs:string"/>
          <xs:element minOccurs="0" name="version" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="consentTemplateStructureDTO">
        <xs:sequence>
          <xs:element name="children">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="entry">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element minOccurs="0" name="key" type="tns:moduleKeyDTO"/>
                      <xs:element minOccurs="0" name="value" type="tns:moduleKeyDTOArray"/>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="firstLevelModules" nillable="true" type="tns:moduleKeyDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getConsentStatusTypeFromExcludingToIncluding">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" name="signerIds" type="tns:signerIdDTO"/>
          <xs:element name="domainName" type="xs:string"/>
          <xs:element name="policyName" type="xs:string"/>
          <xs:element name="versionFrom" type="xs:string"/>
          <xs:element name="versionTo" type="xs:string"/>
          <xs:element name="config" type="tns:checkConsentConfig"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getConsentStatusTypeFromExcludingToIncludingResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:consentStatusType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getAllConsentsForDomain">
        <xs:sequence>
          <xs:element name="domainName" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getAllConsentsForDomainResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" nillable="true">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="consents" type="tns:consentLightDTO"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="consentLightDTO">
        <xs:complexContent>
          <xs:extension base="tns:fhirIdDTO">
            <xs:sequence>
              <xs:element minOccurs="0" name="comment" type="xs:string"/>
              <xs:element minOccurs="0" name="consentDates" type="tns:consentDateValuesDTO"/>
              <xs:element minOccurs="0" name="creationDate" type="xs:dateTime"/>
              <xs:element minOccurs="0" name="expirationProperties" type="tns:expirationPropertiesDTO"/>
              <xs:element minOccurs="0" name="externProperties" type="xs:string"/>
              <xs:element name="hasPatientSignature" type="xs:boolean"/>
              <xs:element minOccurs="0" name="key" type="tns:consentKeyDTO"/>
              <xs:element name="moduleStates">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element maxOccurs="unbounded" minOccurs="0" name="entry">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element minOccurs="0" name="key" type="tns:moduleKeyDTO"/>
                          <xs:element minOccurs="0" name="value" type="tns:moduleStateDTO"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="patientSignatureIsFromGuardian" type="xs:boolean"/>
              <xs:element minOccurs="0" name="patientSigningDate" type="xs:dateTime"/>
              <xs:element minOccurs="0" name="patientSigningPlace" type="xs:string"/>
              <xs:element minOccurs="0" name="physicianId" type="xs:string"/>
              <xs:element minOccurs="0" name="physicianSigningDate" type="xs:dateTime"/>
              <xs:element minOccurs="0" name="physicianSigningPlace" type="xs:string"/>
              <xs:element minOccurs="0" name="qualityControl" type="tns:qcdto"/>
              <xs:element minOccurs="0" name="templateType" type="tns:consentTemplateType"/>
              <xs:element minOccurs="0" name="updateDate" type="xs:dateTime"/>
              <xs:element minOccurs="0" name="validFromDate" type="xs:dateTime"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="consentDateValuesDTO">
        <xs:sequence>
          <xs:element minOccurs="0" name="consentExpirationDate" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="gicsConsentDate" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="legalConsentDate" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="maxPolicyExpirationDate" type="xs:dateTime"/>
          <xs:element name="moduleExpirations">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="entry">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element minOccurs="0" name="key" type="tns:moduleKeyDTO"/>
                      <xs:element minOccurs="0" name="value" type="xs:dateTime"/>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="policyExpirations">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="entry">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element minOccurs="0" name="key" type="tns:moduleKeyDTO"/>
                      <xs:element minOccurs="0" name="value" type="tns:hashMap"/>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="hashMap">
        <xs:complexContent>
          <xs:extension base="tns:abstractMap">
            <xs:sequence/>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType abstract="true" name="abstractMap">
        <xs:sequence/>
      </xs:complexType>
      <xs:complexType name="consentKeyDTO">
        <xs:sequence>
          <xs:element minOccurs="0" name="consentDate" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="consentTemplateKey" type="tns:consentTemplateKeyDTO"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="signerIds" nillable="true" type="tns:signerIdDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="moduleStateDTO">
        <xs:sequence>
          <xs:element minOccurs="0" name="consentState" type="tns:consentStatus"/>
          <xs:element minOccurs="0" name="key" type="tns:moduleKeyDTO"/>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="policyKeys" nillable="true" type="tns:policyKeyDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="qcdto">
        <xs:complexContent>
          <xs:extension base="tns:fhirIdDTO">
            <xs:sequence>
              <xs:element minOccurs="0" name="comment" type="xs:string"/>
              <xs:element minOccurs="0" name="date" type="xs:dateTime"/>
              <xs:element minOccurs="0" name="externProperties" type="xs:string"/>
              <xs:element minOccurs="0" name="inspector" type="xs:string"/>
              <xs:element minOccurs="0" name="type" type="xs:string"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="getAllIdsForSignerIdType">
        <xs:sequence>
          <xs:element name="domainName" type="xs:string"/>
          <xs:element name="signerIdTypeName" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getAllIdsForSignerIdTypeResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" nillable="true">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="signerIds" type="xs:string"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getPolicy">
        <xs:sequence>
          <xs:element name="policyKey" type="tns:policyKeyDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getPolicyResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:policyDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getSignerIdType">
        <xs:sequence>
          <xs:element name="domainName" type="xs:string"/>
          <xs:element name="signerIdTypeName" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getSignerIdTypeResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:signerIdTypeDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="signerIdTypeDTO">
        <xs:complexContent>
          <xs:extension base="tns:fhirIdDTO">
            <xs:sequence>
              <xs:element minOccurs="0" name="comment" type="xs:string"/>
              <xs:element minOccurs="0" name="createTimestamp" type="xs:dateTime"/>
              <xs:element minOccurs="0" name="label" type="xs:string"/>
              <xs:element minOccurs="0" name="name" type="xs:string"/>
              <xs:element minOccurs="0" name="updateTimestamp" type="xs:dateTime"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="getPolicyStatesForSignerIds">
        <xs:sequence>
          <xs:element name="domainName" type="xs:string"/>
          <xs:element maxOccurs="unbounded" name="signerIds" type="tns:signerIdDTO"/>
          <xs:element name="useAliases" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getPolicyStatesForSignerIdsResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" nillable="true">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="signedPolicies" type="tns:signedPolicyDTO"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="signedPolicyDTO">
        <xs:complexContent>
          <xs:extension base="tns:fhirIdDTO">
            <xs:sequence>
              <xs:element minOccurs="0" name="consentKey" type="tns:consentKeyDTO"/>
              <xs:element minOccurs="0" name="policyKey" type="tns:policyKeyDTO"/>
              <xs:element minOccurs="0" name="status" type="tns:consentStatus"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="deactivateAlias">
        <xs:sequence>
          <xs:element name="domainName" type="xs:string"/>
          <xs:element name="originalSignerId" type="tns:signerIdDTO"/>
          <xs:element name="aliasSignerId" type="tns:signerIdDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="deactivateAliasResponse">
        <xs:sequence/>
      </xs:complexType>
      <xs:complexType name="getConsentLight">
        <xs:sequence>
          <xs:element name="consentKey" type="tns:consentKeyDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getConsentLightResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:consentLightDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getCurrentConsentForSignerIdsAndCT">
        <xs:sequence>
          <xs:element name="consentTemplateKey" type="tns:consentTemplateKeyDTO"/>
          <xs:element maxOccurs="unbounded" name="signerIds" type="tns:signerIdDTO"/>
          <xs:element name="ignoreVersionNumber" type="xs:boolean"/>
          <xs:element name="useAliases" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getCurrentConsentForSignerIdsAndCTResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:consentDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="consentDTO">
        <xs:complexContent>
          <xs:extension base="tns:consentLightDTO">
            <xs:sequence>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="freeTextVals" nillable="true" type="tns:freeTextValDTO"/>
              <xs:element minOccurs="0" name="patientSignatureBase64" type="xs:string"/>
              <xs:element minOccurs="0" name="physicianSignatureBase64" type="xs:string"/>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="scans" nillable="true" type="tns:consentScanDTO"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="freeTextValDTO">
        <xs:complexContent>
          <xs:extension base="tns:fhirIdDTO">
            <xs:sequence>
              <xs:element minOccurs="0" name="freeTextDefName" type="xs:string"/>
              <xs:element minOccurs="0" name="value" type="xs:string"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="consentScanDTO">
        <xs:complexContent>
          <xs:extension base="tns:fhirIdDTO">
            <xs:sequence>
              <xs:element minOccurs="0" name="base64" type="xs:string"/>
              <xs:element minOccurs="0" name="consentKey" type="tns:consentKeyDTO"/>
              <xs:element minOccurs="0" name="fileName" type="xs:string"/>
              <xs:element minOccurs="0" name="fileType" type="xs:string"/>
              <xs:element minOccurs="0" name="uploadDate" type="xs:dateTime"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="updateConsentInUse">
        <xs:sequence>
          <xs:element name="consentKey" type="tns:consentKeyDTO"/>
          <xs:element name="externProperties" type="xs:string"/>
          <xs:element name="comment" type="xs:string"/>
          <xs:element name="scan" type="tns:consentScanDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="updateConsentInUseResponse">
        <xs:sequence/>
      </xs:complexType>
      <xs:complexType name="getConsentDates">
        <xs:sequence>
          <xs:element name="consentKey" type="tns:consentKeyDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getConsentDatesResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:consentDateValuesDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="listPolicies">
        <xs:sequence>
          <xs:element name="domainName" type="xs:string"/>
          <xs:element name="onlyFinal" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="listPoliciesResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" nillable="true">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="policies" type="tns:policyDTO"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getAllConsentsForConsentTemplate">
        <xs:sequence>
          <xs:element name="consentTemplateKey" type="tns:consentTemplateKeyDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getAllConsentsForConsentTemplateResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" nillable="true">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="consents" type="tns:consentLightDTO"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getDomain">
        <xs:sequence>
          <xs:element name="domainName" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getDomainResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:domainDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="domainDTO">
        <xs:complexContent>
          <xs:extension base="tns:fhirIdDTO">
            <xs:sequence>
              <xs:element minOccurs="0" name="comment" type="xs:string"/>
              <xs:element minOccurs="0" name="creationDate" type="xs:dateTime"/>
              <xs:element minOccurs="0" name="ctVersionConverter" type="xs:string"/>
              <xs:element minOccurs="0" name="expirationProperties" type="tns:expirationPropertiesDTO"/>
              <xs:element minOccurs="0" name="externProperties" type="xs:string"/>
              <xs:element name="finalised" type="xs:boolean"/>
              <xs:element minOccurs="0" name="label" type="xs:string"/>
              <xs:element minOccurs="0" name="logo" type="xs:string"/>
              <xs:element minOccurs="0" name="moduleVersionConverter" type="xs:string"/>
              <xs:element minOccurs="0" name="name" type="xs:string"/>
              <xs:element minOccurs="0" name="policyVersionConverter" type="xs:string"/>
              <xs:element minOccurs="0" name="properties" type="xs:string"/>
              <xs:element maxOccurs="unbounded" minOccurs="0" name="signerIdTypes" nillable="true" type="xs:string"/>
              <xs:element minOccurs="0" name="updateDate" type="xs:dateTime"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="getPolicyStatesForPolicyAndSignerIds">
        <xs:sequence>
          <xs:element name="policyKey" type="tns:policyKeyDTO"/>
          <xs:element maxOccurs="unbounded" name="signerIds" type="tns:signerIdDTO"/>
          <xs:element name="useAliases" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getPolicyStatesForPolicyAndSignerIdsResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" nillable="true">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="signedPolicies" type="tns:signedPolicyDTO"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="addSignerIdToConsent">
        <xs:sequence>
          <xs:element name="consentKey" type="tns:consentKeyDTO"/>
          <xs:element name="signerId" type="tns:signerIdDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="addSignerIdToConsentResponse">
        <xs:sequence/>
      </xs:complexType>
      <xs:complexType name="getPolicyStatesForPolicyNameAndSignerIds">
        <xs:sequence>
          <xs:element name="domainName" type="xs:string"/>
          <xs:element name="policyName" type="xs:string"/>
          <xs:element maxOccurs="unbounded" name="signerIds" type="tns:signerIdDTO"/>
          <xs:element name="useAliases" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getPolicyStatesForPolicyNameAndSignerIdsResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" nillable="true">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="signedPolicies" type="tns:signedPolicyDTO"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getObjectByFhirID">
        <xs:sequence>
          <xs:element name="clazz" type="xs:string"/>
          <xs:element name="fhirID" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getObjectByFhirIDResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:fhirIdDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getAliasesForSignerIds">
        <xs:sequence>
          <xs:element name="domainName" type="xs:string"/>
          <xs:element maxOccurs="unbounded" name="originalSignerIds" type="tns:signerIdDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getAliasesForSignerIdsResponse">
        <xs:sequence>
          <xs:element name="return" nillable="true">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="entry">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element minOccurs="0" name="key" type="tns:signerIdDTO"/>
                      <xs:element minOccurs="0" name="value" type="tns:signerIdDTOArray"/>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getConsentStatusTypeFromIncludingToExcluding">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" name="signerIds" type="tns:signerIdDTO"/>
          <xs:element name="domainName" type="xs:string"/>
          <xs:element name="policyName" type="xs:string"/>
          <xs:element name="versionFrom" type="xs:string"/>
          <xs:element name="versionTo" type="xs:string"/>
          <xs:element name="config" type="tns:checkConsentConfig"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getConsentStatusTypeFromIncludingToExcludingResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:consentStatusType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getSignerIdsForAlias">
        <xs:sequence>
          <xs:element name="domainName" type="xs:string"/>
          <xs:element name="aliasSignerId" type="tns:signerIdDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getSignerIdsForAliasResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" nillable="true">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="signerIds" type="tns:signerIdDTO"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="addAlias">
        <xs:sequence>
          <xs:element name="domainName" type="xs:string"/>
          <xs:element name="originalSignerId" type="tns:signerIdDTO"/>
          <xs:element name="aliasSignerId" type="tns:signerIdDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="addAliasResponse">
        <xs:sequence/>
      </xs:complexType>
      <xs:complexType name="isConsentedFromIncludingToIncluding">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" name="signerIds" type="tns:signerIdDTO"/>
          <xs:element name="domainName" type="xs:string"/>
          <xs:element name="policyName" type="xs:string"/>
          <xs:element name="versionFrom" type="xs:string"/>
          <xs:element name="versionTo" type="xs:string"/>
          <xs:element name="config" type="tns:checkConsentConfig"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="isConsentedFromIncludingToIncludingResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getMappedTemplatesForSignerId">
        <xs:sequence>
          <xs:element name="domainName" type="xs:string"/>
          <xs:element name="ctType" type="tns:consentTemplateType"/>
          <xs:element name="signerId" type="tns:signerIdDTO"/>
          <xs:element name="useAliases" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getMappedTemplatesForSignerIdResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" nillable="true">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="templates" type="tns:consentTemplateKeyDTO"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getModule">
        <xs:sequence>
          <xs:element name="moduleKey" type="tns:moduleKeyDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getModuleResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:moduleDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="addScanToConsent">
        <xs:sequence>
          <xs:element name="consentKey" type="tns:consentKeyDTO"/>
          <xs:element name="scanBase64" type="xs:string"/>
          <xs:element name="fileType" type="xs:string"/>
          <xs:element name="fileName" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="addScanToConsentResponse">
        <xs:sequence/>
      </xs:complexType>
      <xs:complexType name="isConsentedFromIncludingToExcluding">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" name="signerIds" type="tns:signerIdDTO"/>
          <xs:element name="domainName" type="xs:string"/>
          <xs:element name="policyName" type="xs:string"/>
          <xs:element name="versionFrom" type="xs:string"/>
          <xs:element name="versionTo" type="xs:string"/>
          <xs:element name="config" type="tns:checkConsentConfig"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="isConsentedFromIncludingToExcludingResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getQCHistoryForConsent">
        <xs:sequence>
          <xs:element name="consentKey" type="tns:consentKeyDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getQCHistoryForConsentResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" nillable="true">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="qcHistories" type="tns:qcHistoryDTO"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="qcHistoryDTO">
        <xs:complexContent>
          <xs:extension base="tns:qcdto">
            <xs:sequence>
              <xs:element minOccurs="0" name="endDate" type="xs:dateTime"/>
              <xs:element minOccurs="0" name="startDate" type="xs:dateTime"/>
            </xs:sequence>
          </xs:extension>
        </xs:complexContent>
      </xs:complexType>
      <xs:complexType name="getConsentStatusType">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" name="signerIds" type="tns:signerIdDTO"/>
          <xs:element name="policyKey" type="tns:policyKeyDTO"/>
          <xs:element name="config" type="tns:checkConsentConfig"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getConsentStatusTypeResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:consentStatusType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getConsentTemplate">
        <xs:sequence>
          <xs:element name="consentTemplateKey" type="tns:consentTemplateKeyDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getConsentTemplateResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:consentTemplateDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getCurrentPolicyStatesForSignerIds">
        <xs:sequence>
          <xs:element name="domainName" type="xs:string"/>
          <xs:element maxOccurs="unbounded" name="signerIds" type="tns:signerIdDTO"/>
          <xs:element name="config" type="tns:checkConsentConfig"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getCurrentPolicyStatesForSignerIdsResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" nillable="true">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="signedPolicies" type="tns:signedPolicyDTO"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="listDomains">
        <xs:sequence/>
      </xs:complexType>
      <xs:complexType name="listDomainsResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" nillable="true">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="domains" type="tns:domainDTO"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getAllConsentsForDomainWithoutScan">
        <xs:sequence>
          <xs:element name="domainName" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getAllConsentsForDomainWithoutScanResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" nillable="true">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="consents" type="tns:consentLightDTO"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="isConsentedFromExcludingToIncluding">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" name="signerIds" type="tns:signerIdDTO"/>
          <xs:element name="domainName" type="xs:string"/>
          <xs:element name="policyName" type="xs:string"/>
          <xs:element name="versionFrom" type="xs:string"/>
          <xs:element name="versionTo" type="xs:string"/>
          <xs:element name="config" type="tns:checkConsentConfig"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="isConsentedFromExcludingToIncludingResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getAllConsentsForSignerIds">
        <xs:sequence>
          <xs:element name="domainName" type="xs:string"/>
          <xs:element maxOccurs="unbounded" name="signerIds" type="tns:signerIdDTO"/>
          <xs:element name="useAliases" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getAllConsentsForSignerIdsResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" nillable="true">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="consents" type="tns:consentLightDTO"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="removeScanFromConsent">
        <xs:sequence>
          <xs:element name="consentKey" type="tns:consentKeyDTO"/>
          <xs:element name="fhirId" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="removeScanFromConsentResponse">
        <xs:sequence/>
      </xs:complexType>
      <xs:complexType name="isConsented">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" name="signerIds" type="tns:signerIdDTO"/>
          <xs:element name="policyKey" type="tns:policyKeyDTO"/>
          <xs:element name="config" type="tns:checkConsentConfig"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="isConsentedResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getConsentsForDomainPaginated">
        <xs:sequence>
          <xs:element name="domainName" type="xs:string"/>
          <xs:element name="config" type="tns:paginationConfig"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="paginationConfig">
        <xs:sequence>
          <xs:element minOccurs="0" name="endDate" type="xs:dateTime"/>
          <xs:element name="filter">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="entry">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element minOccurs="0" name="key" type="tns:consentField"/>
                      <xs:element minOccurs="0" name="value" type="xs:string"/>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
          <xs:element name="filterFieldsAreTreatedAsConjunction" type="xs:boolean"/>
          <xs:element name="filterIsCaseSensitive" type="xs:boolean"/>
          <xs:element name="firstEntry" type="xs:int"/>
          <xs:element name="pageSize" type="xs:int"/>
          <xs:element minOccurs="0" name="sortField" type="tns:consentField"/>
          <xs:element name="sortIsAscending" type="xs:boolean"/>
          <xs:element minOccurs="0" name="startDate" type="xs:dateTime"/>
          <xs:element minOccurs="0" name="templateType" type="tns:consentTemplateType"/>
          <xs:element name="useAliases" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getConsentsForDomainPaginatedResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" nillable="true">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="consents" type="tns:consentLightDTO"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getConsentStatusTypeFromExcludingToExcluding">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" name="signerIds" type="tns:signerIdDTO"/>
          <xs:element name="domainName" type="xs:string"/>
          <xs:element name="policyName" type="xs:string"/>
          <xs:element name="versionFrom" type="xs:string"/>
          <xs:element name="versionTo" type="xs:string"/>
          <xs:element name="config" type="tns:checkConsentConfig"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getConsentStatusTypeFromExcludingToExcludingResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:consentStatusType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getConsent">
        <xs:sequence>
          <xs:element name="consentKey" type="tns:consentKeyDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getConsentResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:consentDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getCurrentConsentTemplate">
        <xs:sequence>
          <xs:element name="consentTemplateName" type="xs:string"/>
          <xs:element name="domainName" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getCurrentConsentTemplateResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:consentTemplateDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="validateConsent">
        <xs:sequence>
          <xs:element name="consent" type="tns:consentDTO"/>
          <xs:element name="allowRevoke" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="validateConsentResponse">
        <xs:sequence/>
      </xs:complexType>
      <xs:complexType name="addSignerIdToSignerId">
        <xs:sequence>
          <xs:element name="domainName" type="xs:string"/>
          <xs:element name="existentSignerId" type="tns:signerIdDTO"/>
          <xs:element name="newSignerId" type="tns:signerIdDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="addSignerIdToSignerIdResponse">
        <xs:sequence/>
      </xs:complexType>
      <xs:complexType name="getAllConsentedIdsFor">
        <xs:sequence>
          <xs:element name="signerIdTypeName" type="xs:string"/>
          <xs:element name="policyKey" type="tns:policyKeyDTO"/>
          <xs:element name="config" type="tns:checkConsentConfig"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getAllConsentedIdsForResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" nillable="true">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="consentIds" type="xs:string"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getConsentStatusTypeFromIncludingToIncluding">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" name="signerIds" type="tns:signerIdDTO"/>
          <xs:element name="domainName" type="xs:string"/>
          <xs:element name="policyName" type="xs:string"/>
          <xs:element name="versionFrom" type="xs:string"/>
          <xs:element name="versionTo" type="xs:string"/>
          <xs:element name="config" type="tns:checkConsentConfig"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getConsentStatusTypeFromIncludingToIncludingResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" type="tns:consentStatusType"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="listSignerIdTypes">
        <xs:sequence>
          <xs:element name="domainName" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="listSignerIdTypesResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" nillable="true">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="signerIdTypes" type="tns:signerIdTypeDTO"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="listCurrentConsentTemplates">
        <xs:sequence>
          <xs:element name="domainName" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="listCurrentConsentTemplatesResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" nillable="true">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="currentConsentTemplates" type="tns:consentTemplateDTO"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="listModules">
        <xs:sequence>
          <xs:element name="domainName" type="xs:string"/>
          <xs:element name="onlyFinal" type="xs:boolean"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="listModulesResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" nillable="true">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="modules" type="tns:moduleDTO"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getAliasesForSignerId">
        <xs:sequence>
          <xs:element name="domainName" type="xs:string"/>
          <xs:element name="originalSignerId" type="tns:signerIdDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getAliasesForSignerIdResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" nillable="true">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="aliases" type="tns:signerIdDTO"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="addConsent">
        <xs:sequence>
          <xs:element name="consent" type="tns:consentDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="addConsentResponse">
        <xs:sequence/>
      </xs:complexType>
      <xs:complexType name="getTemplatesWithPolicies">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" name="policyKeyDTOs" type="tns:policyKeyDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="getTemplatesWithPoliciesResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="return" nillable="true">
            <xs:complexType>
              <xs:sequence>
                <xs:element maxOccurs="unbounded" minOccurs="0" name="templates" type="tns:consentTemplateKeyDTO"/>
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="refuseConsent">
        <xs:sequence>
          <xs:element name="consentTemplateKey" type="tns:consentTemplateKeyDTO"/>
          <xs:element maxOccurs="unbounded" name="signerIds" type="tns:signerIdDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="refuseConsentResponse">
        <xs:sequence/>
      </xs:complexType>
      <xs:complexType name="countConsentsForDomainWithFilter">
        <xs:sequence>
          <xs:element name="domainName" type="xs:string"/>
          <xs:element name="config" type="tns:paginationConfig"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="countConsentsForDomainWithFilterResponse">
        <xs:sequence>
          <xs:element name="return" type="xs:long"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="setQCForConsent">
        <xs:sequence>
          <xs:element name="consentKey" type="tns:consentKeyDTO"/>
          <xs:element name="qc" type="tns:qcdto"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="setQCForConsentResponse">
        <xs:sequence/>
      </xs:complexType>
      <xs:simpleType name="idMatchingType">
        <xs:restriction base="xs:string">
          <xs:enumeration value="AT_LEAST_ONE"/>
          <xs:enumeration value="AT_LEAST_ALL"/>
          <xs:enumeration value="EXACT"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="consentStatus">
        <xs:restriction base="xs:string">
          <xs:enumeration value="ACCEPTED"/>
          <xs:enumeration value="DECLINED"/>
          <xs:enumeration value="UNKNOWN"/>
          <xs:enumeration value="NOT_ASKED"/>
          <xs:enumeration value="NOT_CHOSEN"/>
          <xs:enumeration value="WITHDRAWN"/>
          <xs:enumeration value="INVALIDATED"/>
          <xs:enumeration value="REFUSED"/>
          <xs:enumeration value="EXPIRED"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="freeTextType">
        <xs:restriction base="xs:string">
          <xs:enumeration value="STRING"/>
          <xs:enumeration value="DATE"/>
          <xs:enumeration value="INTEGER"/>
          <xs:enumeration value="DOUBLE"/>
          <xs:enumeration value="BOOLEAN"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="consentTemplateType">
        <xs:restriction base="xs:string">
          <xs:enumeration value="CONSENT"/>
          <xs:enumeration value="REVOCATION"/>
          <xs:enumeration value="REFUSAL"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="consentStatusType">
        <xs:restriction base="xs:string">
          <xs:enumeration value="ACCEPTED"/>
          <xs:enumeration value="DECLINED"/>
          <xs:enumeration value="UNKNOWN"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="consentField">
        <xs:restriction base="xs:string">
          <xs:enumeration value="NONE"/>
          <xs:enumeration value="DATE"/>
          <xs:enumeration value="CT_VERSION"/>
          <xs:enumeration value="CT_NAME"/>
          <xs:enumeration value="CT_LABEL"/>
          <xs:enumeration value="SIGNER_ID"/>
          <xs:enumeration value="QC_TYPE"/>
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType final="#all" name="moduleKeyDTOArray">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="item" nillable="true" type="tns:moduleKeyDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType final="#all" name="signerIdDTOArray">
        <xs:sequence>
          <xs:element maxOccurs="unbounded" minOccurs="0" name="item" nillable="true" type="tns:signerIdDTO"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="InvalidParameterException" type="tns:InvalidParameterException"/>
      <xs:complexType name="InvalidParameterException">
        <xs:sequence>
          <xs:element minOccurs="0" name="parameterName" type="xs:string"/>
          <xs:element minOccurs="0" name="message" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="UnknownDomainException" type="tns:UnknownDomainException"/>
      <xs:complexType name="UnknownDomainException">
        <xs:sequence>
          <xs:element minOccurs="0" name="message" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="UnknownSignerIdTypeException" type="tns:UnknownSignerIdTypeException"/>
      <xs:complexType name="UnknownSignerIdTypeException">
        <xs:sequence>
          <xs:element minOccurs="0" name="message" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="InvalidVersionException" type="tns:InvalidVersionException"/>
      <xs:complexType name="InvalidVersionException">
        <xs:sequence>
          <xs:element minOccurs="0" name="message" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="InconsistentStatusException" type="tns:InconsistentStatusException"/>
      <xs:complexType name="InconsistentStatusException">
        <xs:sequence>
          <xs:element minOccurs="0" name="message" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="UnknownPolicyException" type="tns:UnknownPolicyException"/>
      <xs:complexType name="UnknownPolicyException">
        <xs:sequence>
          <xs:element minOccurs="0" name="message" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="UnknownSignerIdException" type="tns:UnknownSignerIdException"/>
      <xs:complexType name="UnknownSignerIdException">
        <xs:sequence>
          <xs:element minOccurs="0" name="message" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="UnknownAliasException" type="tns:UnknownAliasException"/>
      <xs:complexType name="UnknownAliasException">
        <xs:sequence>
          <xs:element minOccurs="0" name="message" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="UnknownConsentException" type="tns:UnknownConsentException"/>
      <xs:complexType name="UnknownConsentException">
        <xs:sequence>
          <xs:element minOccurs="0" name="message" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="UnknownConsentTemplateException" type="tns:UnknownConsentTemplateException"/>
      <xs:complexType name="UnknownConsentTemplateException">
        <xs:sequence>
          <xs:element minOccurs="0" name="message" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="InternalException" type="tns:InternalException"/>
      <xs:complexType name="InternalException">
        <xs:sequence>
          <xs:element minOccurs="0" name="message" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="IllegalArgumentException" type="tns:IllegalArgumentException"/>
      <xs:complexType name="IllegalArgumentException">
        <xs:sequence>
          <xs:element minOccurs="0" name="message" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="UnknownFhirIdObjectException" type="tns:UnknownFhirIdObjectException"/>
      <xs:complexType name="UnknownFhirIdObjectException">
        <xs:sequence>
          <xs:element minOccurs="0" name="message" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="UnknownIDException" type="tns:UnknownIDException"/>
      <xs:complexType name="UnknownIDException">
        <xs:sequence>
          <xs:element minOccurs="0" name="message" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="UnknownModuleException" type="tns:UnknownModuleException"/>
      <xs:complexType name="UnknownModuleException">
        <xs:sequence>
          <xs:element minOccurs="0" name="message" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="DuplicateEntryException" type="tns:DuplicateEntryException"/>
      <xs:complexType name="DuplicateEntryException">
        <xs:sequence>
          <xs:element minOccurs="0" name="message" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="MissingRequiredObjectException" type="tns:MissingRequiredObjectException"/>
      <xs:complexType name="MissingRequiredObjectException">
        <xs:sequence>
          <xs:element minOccurs="0" name="message" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="MandatoryFieldsException" type="tns:MandatoryFieldsException"/>
      <xs:complexType name="MandatoryFieldsException">
        <xs:sequence>
          <xs:element minOccurs="0" name="message" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="InvalidFreeTextException" type="tns:InvalidFreeTextException"/>
      <xs:complexType name="InvalidFreeTextException">
        <xs:sequence>
          <xs:element minOccurs="0" name="message" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:element name="RequirementsNotFullfilledException" type="tns:RequirementsNotFullfilledException"/>
      <xs:complexType name="RequirementsNotFullfilledException">
        <xs:sequence>
          <xs:element minOccurs="0" name="message" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="getConsentStatusTypeResponse">
    <wsdl:part element="tns:getConsentStatusTypeResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listConsentTemplatesResponse">
    <wsdl:part element="tns:listConsentTemplatesResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getConsentStatusTypeFromExcludingToIncluding">
    <wsdl:part element="tns:getConsentStatusTypeFromExcludingToIncluding" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAllConsentsForDomain">
    <wsdl:part element="tns:getAllConsentsForDomain" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSignerIdType">
    <wsdl:part element="tns:getSignerIdType" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPolicyStatesForSignerIds">
    <wsdl:part element="tns:getPolicyStatesForSignerIds" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAllConsentsForDomainWithoutScanResponse">
    <wsdl:part element="tns:getAllConsentsForDomainWithoutScanResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="UnknownModuleException">
    <wsdl:part element="tns:UnknownModuleException" name="UnknownModuleException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAllConsentsForSignerIdsResponse">
    <wsdl:part element="tns:getAllConsentsForSignerIdsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getObjectByFhirIDResponse">
    <wsdl:part element="tns:getObjectByFhirIDResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listPolicies">
    <wsdl:part element="tns:listPolicies" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="setQCForConsentResponse">
    <wsdl:part element="tns:setQCForConsentResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getConsentLightResponse">
    <wsdl:part element="tns:getConsentLightResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="addConsentResponse">
    <wsdl:part element="tns:addConsentResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="InvalidFreeTextException">
    <wsdl:part element="tns:InvalidFreeTextException" name="InvalidFreeTextException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPolicyStatesForPolicyAndSignerIds">
    <wsdl:part element="tns:getPolicyStatesForPolicyAndSignerIds" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="addSignerIdToConsent">
    <wsdl:part element="tns:addSignerIdToConsent" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getObjectByFhirID">
    <wsdl:part element="tns:getObjectByFhirID" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAliasesForSignerIds">
    <wsdl:part element="tns:getAliasesForSignerIds" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getConsentStatusTypeFromIncludingToExcluding">
    <wsdl:part element="tns:getConsentStatusTypeFromIncludingToExcluding" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getMappedTemplatesForSignerId">
    <wsdl:part element="tns:getMappedTemplatesForSignerId" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listModulesResponse">
    <wsdl:part element="tns:listModulesResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getModule">
    <wsdl:part element="tns:getModule" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="addScanToConsent">
    <wsdl:part element="tns:addScanToConsent" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getConsentStatusTypeFromExcludingToExcludingResponse">
    <wsdl:part element="tns:getConsentStatusTypeFromExcludingToExcludingResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="UnknownPolicyException">
    <wsdl:part element="tns:UnknownPolicyException" name="UnknownPolicyException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="MandatoryFieldsException">
    <wsdl:part element="tns:MandatoryFieldsException" name="MandatoryFieldsException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAllConsentsForConsentTemplateResponse">
    <wsdl:part element="tns:getAllConsentsForConsentTemplateResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getConsentStatusType">
    <wsdl:part element="tns:getConsentStatusType" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getConsentTemplate">
    <wsdl:part element="tns:getConsentTemplate" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="IllegalArgumentException">
    <wsdl:part element="tns:IllegalArgumentException" name="IllegalArgumentException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getCurrentConsentTemplateResponse">
    <wsdl:part element="tns:getCurrentConsentTemplateResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="InvalidParameterException">
    <wsdl:part element="tns:InvalidParameterException" name="InvalidParameterException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="isConsentedFromIncludingToIncludingResponse">
    <wsdl:part element="tns:isConsentedFromIncludingToIncludingResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="removeScanFromConsent">
    <wsdl:part element="tns:removeScanFromConsent" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAliasesForSignerIdsResponse">
    <wsdl:part element="tns:getAliasesForSignerIdsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listPoliciesResponse">
    <wsdl:part element="tns:listPoliciesResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="isConsented">
    <wsdl:part element="tns:isConsented" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getConsentsForDomainPaginated">
    <wsdl:part element="tns:getConsentsForDomainPaginated" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="countConsentsForDomainWithFilterResponse">
    <wsdl:part element="tns:countConsentsForDomainWithFilterResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="UnknownConsentException">
    <wsdl:part element="tns:UnknownConsentException" name="UnknownConsentException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="isConsentedFromExcludingToExcludingResponse">
    <wsdl:part element="tns:isConsentedFromExcludingToExcludingResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="UnknownSignerIdTypeException">
    <wsdl:part element="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getConsent">
    <wsdl:part element="tns:getConsent" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="isConsentedResponse">
    <wsdl:part element="tns:isConsentedResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="RequirementsNotFullfilledException">
    <wsdl:part element="tns:RequirementsNotFullfilledException" name="RequirementsNotFullfilledException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getCurrentConsentTemplate">
    <wsdl:part element="tns:getCurrentConsentTemplate" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="validateConsent">
    <wsdl:part element="tns:validateConsent" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listSignerIdTypesResponse">
    <wsdl:part element="tns:listSignerIdTypesResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="DuplicateEntryException">
    <wsdl:part element="tns:DuplicateEntryException" name="DuplicateEntryException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="UnknownAliasException">
    <wsdl:part element="tns:UnknownAliasException" name="UnknownAliasException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateConsentInUseResponse">
    <wsdl:part element="tns:updateConsentInUseResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="addSignerIdToSignerId">
    <wsdl:part element="tns:addSignerIdToSignerId" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getConsentStatusTypeFromIncludingToIncluding">
    <wsdl:part element="tns:getConsentStatusTypeFromIncludingToIncluding" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="InconsistentStatusException">
    <wsdl:part element="tns:InconsistentStatusException" name="InconsistentStatusException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listSignerIdTypes">
    <wsdl:part element="tns:listSignerIdTypes" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getDomainResponse">
    <wsdl:part element="tns:getDomainResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="UnknownFhirIdObjectException">
    <wsdl:part element="tns:UnknownFhirIdObjectException" name="UnknownFhirIdObjectException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAliasesForSignerId">
    <wsdl:part element="tns:getAliasesForSignerId" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="isConsentedFromIncludingToExcludingResponse">
    <wsdl:part element="tns:isConsentedFromIncludingToExcludingResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="addConsent">
    <wsdl:part element="tns:addConsent" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAllConsentsForDomainResponse">
    <wsdl:part element="tns:getAllConsentsForDomainResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSignerIdTypeResponse">
    <wsdl:part element="tns:getSignerIdTypeResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listDomainsResponse">
    <wsdl:part element="tns:listDomainsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="InvalidVersionException">
    <wsdl:part element="tns:InvalidVersionException" name="InvalidVersionException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="validateConsentResponse">
    <wsdl:part element="tns:validateConsentResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="setQCForConsent">
    <wsdl:part element="tns:setQCForConsent" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAllIdsForSignerIdTypeResponse">
    <wsdl:part element="tns:getAllIdsForSignerIdTypeResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="addAliasResponse">
    <wsdl:part element="tns:addAliasResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="isConsentedFromExcludingToExcluding">
    <wsdl:part element="tns:isConsentedFromExcludingToExcluding" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listConsentTemplates">
    <wsdl:part element="tns:listConsentTemplates" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAliasesForSignerIdResponse">
    <wsdl:part element="tns:getAliasesForSignerIdResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="refuseConsentResponse">
    <wsdl:part element="tns:refuseConsentResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAllIdsForSignerIdType">
    <wsdl:part element="tns:getAllIdsForSignerIdType" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPolicy">
    <wsdl:part element="tns:getPolicy" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="deactivateAlias">
    <wsdl:part element="tns:deactivateAlias" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getConsentLight">
    <wsdl:part element="tns:getConsentLight" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getCurrentConsentForSignerIdsAndCT">
    <wsdl:part element="tns:getCurrentConsentForSignerIdsAndCT" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAllConsentedIdsForResponse">
    <wsdl:part element="tns:getAllConsentedIdsForResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="updateConsentInUse">
    <wsdl:part element="tns:updateConsentInUse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getConsentDates">
    <wsdl:part element="tns:getConsentDates" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAllConsentsForConsentTemplate">
    <wsdl:part element="tns:getAllConsentsForConsentTemplate" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getDomain">
    <wsdl:part element="tns:getDomain" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPolicyStatesForPolicyNameAndSignerIds">
    <wsdl:part element="tns:getPolicyStatesForPolicyNameAndSignerIds" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPolicyStatesForSignerIdsResponse">
    <wsdl:part element="tns:getPolicyStatesForSignerIdsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getModuleResponse">
    <wsdl:part element="tns:getModuleResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSignerIdsForAlias">
    <wsdl:part element="tns:getSignerIdsForAlias" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="addAlias">
    <wsdl:part element="tns:addAlias" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getSignerIdsForAliasResponse">
    <wsdl:part element="tns:getSignerIdsForAliasResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="isConsentedFromIncludingToIncluding">
    <wsdl:part element="tns:isConsentedFromIncludingToIncluding" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getCurrentConsentForSignerIdsAndCTResponse">
    <wsdl:part element="tns:getCurrentConsentForSignerIdsAndCTResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="isConsentedFromIncludingToExcluding">
    <wsdl:part element="tns:isConsentedFromIncludingToExcluding" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="UnknownIDException">
    <wsdl:part element="tns:UnknownIDException" name="UnknownIDException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getQCHistoryForConsent">
    <wsdl:part element="tns:getQCHistoryForConsent" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPolicyStatesForPolicyNameAndSignerIdsResponse">
    <wsdl:part element="tns:getPolicyStatesForPolicyNameAndSignerIdsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPolicyStatesForPolicyAndSignerIdsResponse">
    <wsdl:part element="tns:getPolicyStatesForPolicyAndSignerIdsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getConsentResponse">
    <wsdl:part element="tns:getConsentResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="UnknownSignerIdException">
    <wsdl:part element="tns:UnknownSignerIdException" name="UnknownSignerIdException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getCurrentPolicyStatesForSignerIds">
    <wsdl:part element="tns:getCurrentPolicyStatesForSignerIds" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listDomains">
    <wsdl:part element="tns:listDomains" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAllConsentsForDomainWithoutScan">
    <wsdl:part element="tns:getAllConsentsForDomainWithoutScan" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="isConsentedFromExcludingToIncluding">
    <wsdl:part element="tns:isConsentedFromExcludingToIncluding" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getCurrentPolicyStatesForSignerIdsResponse">
    <wsdl:part element="tns:getCurrentPolicyStatesForSignerIdsResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAllConsentsForSignerIds">
    <wsdl:part element="tns:getAllConsentsForSignerIds" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="UnknownDomainException">
    <wsdl:part element="tns:UnknownDomainException" name="UnknownDomainException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="InternalException">
    <wsdl:part element="tns:InternalException" name="InternalException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getMappedTemplatesForSignerIdResponse">
    <wsdl:part element="tns:getMappedTemplatesForSignerIdResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getConsentStatusTypeFromExcludingToExcluding">
    <wsdl:part element="tns:getConsentStatusTypeFromExcludingToExcluding" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="addSignerIdToConsentResponse">
    <wsdl:part element="tns:addSignerIdToConsentResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="MissingRequiredObjectException">
    <wsdl:part element="tns:MissingRequiredObjectException" name="MissingRequiredObjectException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getConsentDatesResponse">
    <wsdl:part element="tns:getConsentDatesResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getAllConsentedIdsFor">
    <wsdl:part element="tns:getAllConsentedIdsFor" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPolicyResponse">
    <wsdl:part element="tns:getPolicyResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getConsentsForDomainPaginatedResponse">
    <wsdl:part element="tns:getConsentsForDomainPaginatedResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getConsentStatusTypeFromExcludingToIncludingResponse">
    <wsdl:part element="tns:getConsentStatusTypeFromExcludingToIncludingResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="addScanToConsentResponse">
    <wsdl:part element="tns:addScanToConsentResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listCurrentConsentTemplates">
    <wsdl:part element="tns:listCurrentConsentTemplates" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listModules">
    <wsdl:part element="tns:listModules" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getQCHistoryForConsentResponse">
    <wsdl:part element="tns:getQCHistoryForConsentResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="addSignerIdToSignerIdResponse">
    <wsdl:part element="tns:addSignerIdToSignerIdResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="deactivateAliasResponse">
    <wsdl:part element="tns:deactivateAliasResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getTemplatesWithPolicies">
    <wsdl:part element="tns:getTemplatesWithPolicies" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getConsentTemplateResponse">
    <wsdl:part element="tns:getConsentTemplateResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="listCurrentConsentTemplatesResponse">
    <wsdl:part element="tns:listCurrentConsentTemplatesResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="removeScanFromConsentResponse">
    <wsdl:part element="tns:removeScanFromConsentResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getTemplatesWithPoliciesResponse">
    <wsdl:part element="tns:getTemplatesWithPoliciesResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="refuseConsent">
    <wsdl:part element="tns:refuseConsent" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="countConsentsForDomainWithFilter">
    <wsdl:part element="tns:countConsentsForDomainWithFilter" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="isConsentedFromExcludingToIncludingResponse">
    <wsdl:part element="tns:isConsentedFromExcludingToIncludingResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getConsentStatusTypeFromIncludingToExcludingResponse">
    <wsdl:part element="tns:getConsentStatusTypeFromIncludingToExcludingResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="UnknownConsentTemplateException">
    <wsdl:part element="tns:UnknownConsentTemplateException" name="UnknownConsentTemplateException">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getConsentStatusTypeFromIncludingToIncludingResponse">
    <wsdl:part element="tns:getConsentStatusTypeFromIncludingToIncludingResponse" name="parameters">
    </wsdl:part>
  </wsdl:message>
  <wsdl:portType name="GICSService">
    <wsdl:operation name="isConsentedFromExcludingToExcluding">
      <wsdl:input message="tns:isConsentedFromExcludingToExcluding" name="isConsentedFromExcludingToExcluding">
      </wsdl:input>
      <wsdl:output message="tns:isConsentedFromExcludingToExcludingResponse" name="isConsentedFromExcludingToExcludingResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="listConsentTemplates">
      <wsdl:input message="tns:listConsentTemplates" name="listConsentTemplates">
      </wsdl:input>
      <wsdl:output message="tns:listConsentTemplatesResponse" name="listConsentTemplatesResponse">
      </wsdl:output>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getConsentStatusTypeFromExcludingToIncluding">
      <wsdl:input message="tns:getConsentStatusTypeFromExcludingToIncluding" name="getConsentStatusTypeFromExcludingToIncluding">
      </wsdl:input>
      <wsdl:output message="tns:getConsentStatusTypeFromExcludingToIncludingResponse" name="getConsentStatusTypeFromExcludingToIncludingResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getAllConsentsForDomain">
      <wsdl:input message="tns:getAllConsentsForDomain" name="getAllConsentsForDomain">
      </wsdl:input>
      <wsdl:output message="tns:getAllConsentsForDomainResponse" name="getAllConsentsForDomainResponse">
      </wsdl:output>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:InconsistentStatusException" name="InconsistentStatusException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getAllIdsForSignerIdType">
      <wsdl:input message="tns:getAllIdsForSignerIdType" name="getAllIdsForSignerIdType">
      </wsdl:input>
      <wsdl:output message="tns:getAllIdsForSignerIdTypeResponse" name="getAllIdsForSignerIdTypeResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getPolicy">
      <wsdl:input message="tns:getPolicy" name="getPolicy">
      </wsdl:input>
      <wsdl:output message="tns:getPolicyResponse" name="getPolicyResponse">
      </wsdl:output>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownPolicyException" name="UnknownPolicyException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getSignerIdType">
      <wsdl:input message="tns:getSignerIdType" name="getSignerIdType">
      </wsdl:input>
      <wsdl:output message="tns:getSignerIdTypeResponse" name="getSignerIdTypeResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getPolicyStatesForSignerIds">
      <wsdl:input message="tns:getPolicyStatesForSignerIds" name="getPolicyStatesForSignerIds">
      </wsdl:input>
      <wsdl:output message="tns:getPolicyStatesForSignerIdsResponse" name="getPolicyStatesForSignerIdsResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="deactivateAlias">
      <wsdl:input message="tns:deactivateAlias" name="deactivateAlias">
      </wsdl:input>
      <wsdl:output message="tns:deactivateAliasResponse" name="deactivateAliasResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownSignerIdException" name="UnknownSignerIdException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownAliasException" name="UnknownAliasException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getConsentLight">
      <wsdl:input message="tns:getConsentLight" name="getConsentLight">
      </wsdl:input>
      <wsdl:output message="tns:getConsentLightResponse" name="getConsentLightResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownConsentTemplateException" name="UnknownConsentTemplateException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:InconsistentStatusException" name="InconsistentStatusException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownConsentException" name="UnknownConsentException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getCurrentConsentForSignerIdsAndCT">
      <wsdl:input message="tns:getCurrentConsentForSignerIdsAndCT" name="getCurrentConsentForSignerIdsAndCT">
      </wsdl:input>
      <wsdl:output message="tns:getCurrentConsentForSignerIdsAndCTResponse" name="getCurrentConsentForSignerIdsAndCTResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownConsentTemplateException" name="UnknownConsentTemplateException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:InconsistentStatusException" name="InconsistentStatusException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="updateConsentInUse">
      <wsdl:input message="tns:updateConsentInUse" name="updateConsentInUse">
      </wsdl:input>
      <wsdl:output message="tns:updateConsentInUseResponse" name="updateConsentInUseResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownConsentTemplateException" name="UnknownConsentTemplateException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownConsentException" name="UnknownConsentException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getConsentDates">
      <wsdl:input message="tns:getConsentDates" name="getConsentDates">
      </wsdl:input>
      <wsdl:output message="tns:getConsentDatesResponse" name="getConsentDatesResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownConsentTemplateException" name="UnknownConsentTemplateException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownConsentException" name="UnknownConsentException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="listPolicies">
      <wsdl:input message="tns:listPolicies" name="listPolicies">
      </wsdl:input>
      <wsdl:output message="tns:listPoliciesResponse" name="listPoliciesResponse">
      </wsdl:output>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getAllConsentsForConsentTemplate">
      <wsdl:input message="tns:getAllConsentsForConsentTemplate" name="getAllConsentsForConsentTemplate">
      </wsdl:input>
      <wsdl:output message="tns:getAllConsentsForConsentTemplateResponse" name="getAllConsentsForConsentTemplateResponse">
      </wsdl:output>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownConsentTemplateException" name="UnknownConsentTemplateException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:InconsistentStatusException" name="InconsistentStatusException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getDomain">
      <wsdl:input message="tns:getDomain" name="getDomain">
      </wsdl:input>
      <wsdl:output message="tns:getDomainResponse" name="getDomainResponse">
      </wsdl:output>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getPolicyStatesForPolicyAndSignerIds">
      <wsdl:input message="tns:getPolicyStatesForPolicyAndSignerIds" name="getPolicyStatesForPolicyAndSignerIds">
      </wsdl:input>
      <wsdl:output message="tns:getPolicyStatesForPolicyAndSignerIdsResponse" name="getPolicyStatesForPolicyAndSignerIdsResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="addSignerIdToConsent">
      <wsdl:input message="tns:addSignerIdToConsent" name="addSignerIdToConsent">
      </wsdl:input>
      <wsdl:output message="tns:addSignerIdToConsentResponse" name="addSignerIdToConsentResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownConsentTemplateException" name="UnknownConsentTemplateException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownConsentException" name="UnknownConsentException">
      </wsdl:fault>
      <wsdl:fault message="tns:IllegalArgumentException" name="IllegalArgumentException">
      </wsdl:fault>
      <wsdl:fault message="tns:InternalException" name="InternalException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getPolicyStatesForPolicyNameAndSignerIds">
      <wsdl:input message="tns:getPolicyStatesForPolicyNameAndSignerIds" name="getPolicyStatesForPolicyNameAndSignerIds">
      </wsdl:input>
      <wsdl:output message="tns:getPolicyStatesForPolicyNameAndSignerIdsResponse" name="getPolicyStatesForPolicyNameAndSignerIdsResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getObjectByFhirID">
      <wsdl:input message="tns:getObjectByFhirID" name="getObjectByFhirID">
      </wsdl:input>
      <wsdl:output message="tns:getObjectByFhirIDResponse" name="getObjectByFhirIDResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownIDException" name="UnknownIDException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownFhirIdObjectException" name="UnknownFhirIdObjectException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getAliasesForSignerIds">
      <wsdl:input message="tns:getAliasesForSignerIds" name="getAliasesForSignerIds">
      </wsdl:input>
      <wsdl:output message="tns:getAliasesForSignerIdsResponse" name="getAliasesForSignerIdsResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownSignerIdException" name="UnknownSignerIdException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getConsentStatusTypeFromIncludingToExcluding">
      <wsdl:input message="tns:getConsentStatusTypeFromIncludingToExcluding" name="getConsentStatusTypeFromIncludingToExcluding">
      </wsdl:input>
      <wsdl:output message="tns:getConsentStatusTypeFromIncludingToExcludingResponse" name="getConsentStatusTypeFromIncludingToExcludingResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getSignerIdsForAlias">
      <wsdl:input message="tns:getSignerIdsForAlias" name="getSignerIdsForAlias">
      </wsdl:input>
      <wsdl:output message="tns:getSignerIdsForAliasResponse" name="getSignerIdsForAliasResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownSignerIdException" name="UnknownSignerIdException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="addAlias">
      <wsdl:input message="tns:addAlias" name="addAlias">
      </wsdl:input>
      <wsdl:output message="tns:addAliasResponse" name="addAliasResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownSignerIdException" name="UnknownSignerIdException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="isConsentedFromIncludingToIncluding">
      <wsdl:input message="tns:isConsentedFromIncludingToIncluding" name="isConsentedFromIncludingToIncluding">
      </wsdl:input>
      <wsdl:output message="tns:isConsentedFromIncludingToIncludingResponse" name="isConsentedFromIncludingToIncludingResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getMappedTemplatesForSignerId">
      <wsdl:input message="tns:getMappedTemplatesForSignerId" name="getMappedTemplatesForSignerId">
      </wsdl:input>
      <wsdl:output message="tns:getMappedTemplatesForSignerIdResponse" name="getMappedTemplatesForSignerIdResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownSignerIdException" name="UnknownSignerIdException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:InconsistentStatusException" name="InconsistentStatusException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getModule">
      <wsdl:input message="tns:getModule" name="getModule">
      </wsdl:input>
      <wsdl:output message="tns:getModuleResponse" name="getModuleResponse">
      </wsdl:output>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownModuleException" name="UnknownModuleException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="addScanToConsent">
      <wsdl:input message="tns:addScanToConsent" name="addScanToConsent">
      </wsdl:input>
      <wsdl:output message="tns:addScanToConsentResponse" name="addScanToConsentResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownConsentTemplateException" name="UnknownConsentTemplateException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
      <wsdl:fault message="tns:DuplicateEntryException" name="DuplicateEntryException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownConsentException" name="UnknownConsentException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="isConsentedFromIncludingToExcluding">
      <wsdl:input message="tns:isConsentedFromIncludingToExcluding" name="isConsentedFromIncludingToExcluding">
      </wsdl:input>
      <wsdl:output message="tns:isConsentedFromIncludingToExcludingResponse" name="isConsentedFromIncludingToExcludingResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getQCHistoryForConsent">
      <wsdl:input message="tns:getQCHistoryForConsent" name="getQCHistoryForConsent">
      </wsdl:input>
      <wsdl:output message="tns:getQCHistoryForConsentResponse" name="getQCHistoryForConsentResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownConsentTemplateException" name="UnknownConsentTemplateException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownConsentException" name="UnknownConsentException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getConsentStatusType">
      <wsdl:input message="tns:getConsentStatusType" name="getConsentStatusType">
      </wsdl:input>
      <wsdl:output message="tns:getConsentStatusTypeResponse" name="getConsentStatusTypeResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownPolicyException" name="UnknownPolicyException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getConsentTemplate">
      <wsdl:input message="tns:getConsentTemplate" name="getConsentTemplate">
      </wsdl:input>
      <wsdl:output message="tns:getConsentTemplateResponse" name="getConsentTemplateResponse">
      </wsdl:output>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownConsentTemplateException" name="UnknownConsentTemplateException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getCurrentPolicyStatesForSignerIds">
      <wsdl:input message="tns:getCurrentPolicyStatesForSignerIds" name="getCurrentPolicyStatesForSignerIds">
      </wsdl:input>
      <wsdl:output message="tns:getCurrentPolicyStatesForSignerIdsResponse" name="getCurrentPolicyStatesForSignerIdsResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownSignerIdException" name="UnknownSignerIdException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="listDomains">
      <wsdl:input message="tns:listDomains" name="listDomains">
      </wsdl:input>
      <wsdl:output message="tns:listDomainsResponse" name="listDomainsResponse">
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAllConsentsForDomainWithoutScan">
      <wsdl:input message="tns:getAllConsentsForDomainWithoutScan" name="getAllConsentsForDomainWithoutScan">
      </wsdl:input>
      <wsdl:output message="tns:getAllConsentsForDomainWithoutScanResponse" name="getAllConsentsForDomainWithoutScanResponse">
      </wsdl:output>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:InconsistentStatusException" name="InconsistentStatusException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="isConsentedFromExcludingToIncluding">
      <wsdl:input message="tns:isConsentedFromExcludingToIncluding" name="isConsentedFromExcludingToIncluding">
      </wsdl:input>
      <wsdl:output message="tns:isConsentedFromExcludingToIncludingResponse" name="isConsentedFromExcludingToIncludingResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getAllConsentsForSignerIds">
      <wsdl:input message="tns:getAllConsentsForSignerIds" name="getAllConsentsForSignerIds">
      </wsdl:input>
      <wsdl:output message="tns:getAllConsentsForSignerIdsResponse" name="getAllConsentsForSignerIdsResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:InconsistentStatusException" name="InconsistentStatusException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="removeScanFromConsent">
      <wsdl:input message="tns:removeScanFromConsent" name="removeScanFromConsent">
      </wsdl:input>
      <wsdl:output message="tns:removeScanFromConsentResponse" name="removeScanFromConsentResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownConsentTemplateException" name="UnknownConsentTemplateException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
      <wsdl:fault message="tns:DuplicateEntryException" name="DuplicateEntryException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownConsentException" name="UnknownConsentException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="isConsented">
      <wsdl:input message="tns:isConsented" name="isConsented">
      </wsdl:input>
      <wsdl:output message="tns:isConsentedResponse" name="isConsentedResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownPolicyException" name="UnknownPolicyException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getConsentsForDomainPaginated">
      <wsdl:input message="tns:getConsentsForDomainPaginated" name="getConsentsForDomainPaginated">
      </wsdl:input>
      <wsdl:output message="tns:getConsentsForDomainPaginatedResponse" name="getConsentsForDomainPaginatedResponse">
      </wsdl:output>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:InconsistentStatusException" name="InconsistentStatusException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getConsentStatusTypeFromExcludingToExcluding">
      <wsdl:input message="tns:getConsentStatusTypeFromExcludingToExcluding" name="getConsentStatusTypeFromExcludingToExcluding">
      </wsdl:input>
      <wsdl:output message="tns:getConsentStatusTypeFromExcludingToExcludingResponse" name="getConsentStatusTypeFromExcludingToExcludingResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getConsent">
      <wsdl:input message="tns:getConsent" name="getConsent">
      </wsdl:input>
      <wsdl:output message="tns:getConsentResponse" name="getConsentResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownConsentTemplateException" name="UnknownConsentTemplateException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:InconsistentStatusException" name="InconsistentStatusException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownConsentException" name="UnknownConsentException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getCurrentConsentTemplate">
      <wsdl:input message="tns:getCurrentConsentTemplate" name="getCurrentConsentTemplate">
      </wsdl:input>
      <wsdl:output message="tns:getCurrentConsentTemplateResponse" name="getCurrentConsentTemplateResponse">
      </wsdl:output>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownConsentTemplateException" name="UnknownConsentTemplateException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="validateConsent">
      <wsdl:input message="tns:validateConsent" name="validateConsent">
      </wsdl:input>
      <wsdl:output message="tns:validateConsentResponse" name="validateConsentResponse">
      </wsdl:output>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownConsentTemplateException" name="UnknownConsentTemplateException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownModuleException" name="UnknownModuleException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
      <wsdl:fault message="tns:MissingRequiredObjectException" name="MissingRequiredObjectException">
      </wsdl:fault>
      <wsdl:fault message="tns:MandatoryFieldsException" name="MandatoryFieldsException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="addSignerIdToSignerId">
      <wsdl:input message="tns:addSignerIdToSignerId" name="addSignerIdToSignerId">
      </wsdl:input>
      <wsdl:output message="tns:addSignerIdToSignerIdResponse" name="addSignerIdToSignerIdResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
      <wsdl:fault message="tns:IllegalArgumentException" name="IllegalArgumentException">
      </wsdl:fault>
      <wsdl:fault message="tns:InternalException" name="InternalException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getAllConsentedIdsFor">
      <wsdl:input message="tns:getAllConsentedIdsFor" name="getAllConsentedIdsFor">
      </wsdl:input>
      <wsdl:output message="tns:getAllConsentedIdsForResponse" name="getAllConsentedIdsForResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:InconsistentStatusException" name="InconsistentStatusException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownPolicyException" name="UnknownPolicyException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getConsentStatusTypeFromIncludingToIncluding">
      <wsdl:input message="tns:getConsentStatusTypeFromIncludingToIncluding" name="getConsentStatusTypeFromIncludingToIncluding">
      </wsdl:input>
      <wsdl:output message="tns:getConsentStatusTypeFromIncludingToIncludingResponse" name="getConsentStatusTypeFromIncludingToIncludingResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="listSignerIdTypes">
      <wsdl:input message="tns:listSignerIdTypes" name="listSignerIdTypes">
      </wsdl:input>
      <wsdl:output message="tns:listSignerIdTypesResponse" name="listSignerIdTypesResponse">
      </wsdl:output>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="listCurrentConsentTemplates">
      <wsdl:input message="tns:listCurrentConsentTemplates" name="listCurrentConsentTemplates">
      </wsdl:input>
      <wsdl:output message="tns:listCurrentConsentTemplatesResponse" name="listCurrentConsentTemplatesResponse">
      </wsdl:output>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="listModules">
      <wsdl:input message="tns:listModules" name="listModules">
      </wsdl:input>
      <wsdl:output message="tns:listModulesResponse" name="listModulesResponse">
      </wsdl:output>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getAliasesForSignerId">
      <wsdl:input message="tns:getAliasesForSignerId" name="getAliasesForSignerId">
      </wsdl:input>
      <wsdl:output message="tns:getAliasesForSignerIdResponse" name="getAliasesForSignerIdResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownSignerIdException" name="UnknownSignerIdException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="addConsent">
      <wsdl:input message="tns:addConsent" name="addConsent">
      </wsdl:input>
      <wsdl:output message="tns:addConsentResponse" name="addConsentResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownConsentTemplateException" name="UnknownConsentTemplateException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownModuleException" name="UnknownModuleException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidFreeTextException" name="InvalidFreeTextException">
      </wsdl:fault>
      <wsdl:fault message="tns:RequirementsNotFullfilledException" name="RequirementsNotFullfilledException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
      <wsdl:fault message="tns:MissingRequiredObjectException" name="MissingRequiredObjectException">
      </wsdl:fault>
      <wsdl:fault message="tns:MandatoryFieldsException" name="MandatoryFieldsException">
      </wsdl:fault>
      <wsdl:fault message="tns:DuplicateEntryException" name="DuplicateEntryException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getTemplatesWithPolicies">
      <wsdl:input message="tns:getTemplatesWithPolicies" name="getTemplatesWithPolicies">
      </wsdl:input>
      <wsdl:output message="tns:getTemplatesWithPoliciesResponse" name="getTemplatesWithPoliciesResponse">
      </wsdl:output>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="refuseConsent">
      <wsdl:input message="tns:refuseConsent" name="refuseConsent">
      </wsdl:input>
      <wsdl:output message="tns:refuseConsentResponse" name="refuseConsentResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownConsentTemplateException" name="UnknownConsentTemplateException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
      <wsdl:fault message="tns:InternalException" name="InternalException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="countConsentsForDomainWithFilter">
      <wsdl:input message="tns:countConsentsForDomainWithFilter" name="countConsentsForDomainWithFilter">
      </wsdl:input>
      <wsdl:output message="tns:countConsentsForDomainWithFilterResponse" name="countConsentsForDomainWithFilterResponse">
      </wsdl:output>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="setQCForConsent">
      <wsdl:input message="tns:setQCForConsent" name="setQCForConsent">
      </wsdl:input>
      <wsdl:output message="tns:setQCForConsentResponse" name="setQCForConsentResponse">
      </wsdl:output>
      <wsdl:fault message="tns:UnknownSignerIdTypeException" name="UnknownSignerIdTypeException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidParameterException" name="InvalidParameterException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownConsentTemplateException" name="UnknownConsentTemplateException">
      </wsdl:fault>
      <wsdl:fault message="tns:InvalidVersionException" name="InvalidVersionException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownDomainException" name="UnknownDomainException">
      </wsdl:fault>
      <wsdl:fault message="tns:UnknownConsentException" name="UnknownConsentException">
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="GICSServiceImplServiceSoapBinding" type="tns:GICSService">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="listConsentTemplates">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="listConsentTemplates">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="listConsentTemplatesResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="isConsentedFromExcludingToExcluding">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="isConsentedFromExcludingToExcluding">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="isConsentedFromExcludingToExcludingResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getConsentStatusTypeFromExcludingToIncluding">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getConsentStatusTypeFromExcludingToIncluding">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getConsentStatusTypeFromExcludingToIncludingResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getAllConsentsForDomain">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getAllConsentsForDomain">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAllConsentsForDomainResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InconsistentStatusException">
        <soap:fault name="InconsistentStatusException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getAllIdsForSignerIdType">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getAllIdsForSignerIdType">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAllIdsForSignerIdTypeResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getPolicy">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getPolicy">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getPolicyResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownPolicyException">
        <soap:fault name="UnknownPolicyException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getSignerIdType">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getSignerIdType">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSignerIdTypeResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getPolicyStatesForSignerIds">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getPolicyStatesForSignerIds">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getPolicyStatesForSignerIdsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="deactivateAlias">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="deactivateAlias">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="deactivateAliasResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownSignerIdException">
        <soap:fault name="UnknownSignerIdException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownAliasException">
        <soap:fault name="UnknownAliasException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getConsentLight">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getConsentLight">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getConsentLightResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownConsentTemplateException">
        <soap:fault name="UnknownConsentTemplateException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InconsistentStatusException">
        <soap:fault name="InconsistentStatusException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownConsentException">
        <soap:fault name="UnknownConsentException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getCurrentConsentForSignerIdsAndCT">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getCurrentConsentForSignerIdsAndCT">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getCurrentConsentForSignerIdsAndCTResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownConsentTemplateException">
        <soap:fault name="UnknownConsentTemplateException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InconsistentStatusException">
        <soap:fault name="InconsistentStatusException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="updateConsentInUse">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="updateConsentInUse">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="updateConsentInUseResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownConsentTemplateException">
        <soap:fault name="UnknownConsentTemplateException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownConsentException">
        <soap:fault name="UnknownConsentException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getConsentDates">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getConsentDates">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getConsentDatesResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownConsentTemplateException">
        <soap:fault name="UnknownConsentTemplateException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownConsentException">
        <soap:fault name="UnknownConsentException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="listPolicies">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="listPolicies">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="listPoliciesResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getAllConsentsForConsentTemplate">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getAllConsentsForConsentTemplate">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAllConsentsForConsentTemplateResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownConsentTemplateException">
        <soap:fault name="UnknownConsentTemplateException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InconsistentStatusException">
        <soap:fault name="InconsistentStatusException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getDomain">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getDomain">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getDomainResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getPolicyStatesForPolicyAndSignerIds">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getPolicyStatesForPolicyAndSignerIds">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getPolicyStatesForPolicyAndSignerIdsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="addSignerIdToConsent">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="addSignerIdToConsent">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="addSignerIdToConsentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownConsentTemplateException">
        <soap:fault name="UnknownConsentTemplateException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownConsentException">
        <soap:fault name="UnknownConsentException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="IllegalArgumentException">
        <soap:fault name="IllegalArgumentException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InternalException">
        <soap:fault name="InternalException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getPolicyStatesForPolicyNameAndSignerIds">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getPolicyStatesForPolicyNameAndSignerIds">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getPolicyStatesForPolicyNameAndSignerIdsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getObjectByFhirID">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getObjectByFhirID">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getObjectByFhirIDResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownIDException">
        <soap:fault name="UnknownIDException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownFhirIdObjectException">
        <soap:fault name="UnknownFhirIdObjectException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getAliasesForSignerIds">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getAliasesForSignerIds">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAliasesForSignerIdsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownSignerIdException">
        <soap:fault name="UnknownSignerIdException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getConsentStatusTypeFromIncludingToExcluding">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getConsentStatusTypeFromIncludingToExcluding">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getConsentStatusTypeFromIncludingToExcludingResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getSignerIdsForAlias">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getSignerIdsForAlias">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSignerIdsForAliasResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownSignerIdException">
        <soap:fault name="UnknownSignerIdException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="addAlias">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="addAlias">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="addAliasResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownSignerIdException">
        <soap:fault name="UnknownSignerIdException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="isConsentedFromIncludingToIncluding">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="isConsentedFromIncludingToIncluding">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="isConsentedFromIncludingToIncludingResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getMappedTemplatesForSignerId">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getMappedTemplatesForSignerId">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getMappedTemplatesForSignerIdResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownSignerIdException">
        <soap:fault name="UnknownSignerIdException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InconsistentStatusException">
        <soap:fault name="InconsistentStatusException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getModule">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getModule">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getModuleResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownModuleException">
        <soap:fault name="UnknownModuleException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="addScanToConsent">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="addScanToConsent">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="addScanToConsentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownConsentTemplateException">
        <soap:fault name="UnknownConsentTemplateException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="DuplicateEntryException">
        <soap:fault name="DuplicateEntryException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownConsentException">
        <soap:fault name="UnknownConsentException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="isConsentedFromIncludingToExcluding">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="isConsentedFromIncludingToExcluding">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="isConsentedFromIncludingToExcludingResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getQCHistoryForConsent">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getQCHistoryForConsent">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getQCHistoryForConsentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownConsentTemplateException">
        <soap:fault name="UnknownConsentTemplateException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownConsentException">
        <soap:fault name="UnknownConsentException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getConsentStatusType">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getConsentStatusType">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getConsentStatusTypeResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownPolicyException">
        <soap:fault name="UnknownPolicyException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getConsentTemplate">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getConsentTemplate">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getConsentTemplateResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownConsentTemplateException">
        <soap:fault name="UnknownConsentTemplateException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getCurrentPolicyStatesForSignerIds">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getCurrentPolicyStatesForSignerIds">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getCurrentPolicyStatesForSignerIdsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownSignerIdException">
        <soap:fault name="UnknownSignerIdException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="listDomains">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="listDomains">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="listDomainsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getAllConsentsForDomainWithoutScan">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getAllConsentsForDomainWithoutScan">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAllConsentsForDomainWithoutScanResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InconsistentStatusException">
        <soap:fault name="InconsistentStatusException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="isConsentedFromExcludingToIncluding">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="isConsentedFromExcludingToIncluding">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="isConsentedFromExcludingToIncludingResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getAllConsentsForSignerIds">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getAllConsentsForSignerIds">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAllConsentsForSignerIdsResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InconsistentStatusException">
        <soap:fault name="InconsistentStatusException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="removeScanFromConsent">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="removeScanFromConsent">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="removeScanFromConsentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownConsentTemplateException">
        <soap:fault name="UnknownConsentTemplateException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="DuplicateEntryException">
        <soap:fault name="DuplicateEntryException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownConsentException">
        <soap:fault name="UnknownConsentException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="isConsented">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="isConsented">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="isConsentedResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownPolicyException">
        <soap:fault name="UnknownPolicyException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getConsentsForDomainPaginated">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getConsentsForDomainPaginated">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getConsentsForDomainPaginatedResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InconsistentStatusException">
        <soap:fault name="InconsistentStatusException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getConsentStatusTypeFromExcludingToExcluding">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getConsentStatusTypeFromExcludingToExcluding">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getConsentStatusTypeFromExcludingToExcludingResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getConsent">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getConsent">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getConsentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownConsentTemplateException">
        <soap:fault name="UnknownConsentTemplateException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InconsistentStatusException">
        <soap:fault name="InconsistentStatusException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownConsentException">
        <soap:fault name="UnknownConsentException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getCurrentConsentTemplate">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getCurrentConsentTemplate">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getCurrentConsentTemplateResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownConsentTemplateException">
        <soap:fault name="UnknownConsentTemplateException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="validateConsent">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="validateConsent">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="validateConsentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownConsentTemplateException">
        <soap:fault name="UnknownConsentTemplateException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownModuleException">
        <soap:fault name="UnknownModuleException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="MissingRequiredObjectException">
        <soap:fault name="MissingRequiredObjectException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="MandatoryFieldsException">
        <soap:fault name="MandatoryFieldsException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="addSignerIdToSignerId">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="addSignerIdToSignerId">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="addSignerIdToSignerIdResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="IllegalArgumentException">
        <soap:fault name="IllegalArgumentException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InternalException">
        <soap:fault name="InternalException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getAllConsentedIdsFor">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getAllConsentedIdsFor">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAllConsentedIdsForResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InconsistentStatusException">
        <soap:fault name="InconsistentStatusException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownPolicyException">
        <soap:fault name="UnknownPolicyException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getConsentStatusTypeFromIncludingToIncluding">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getConsentStatusTypeFromIncludingToIncluding">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getConsentStatusTypeFromIncludingToIncludingResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="listSignerIdTypes">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="listSignerIdTypes">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="listSignerIdTypesResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="listCurrentConsentTemplates">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="listCurrentConsentTemplates">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="listCurrentConsentTemplatesResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="listModules">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="listModules">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="listModulesResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getAliasesForSignerId">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getAliasesForSignerId">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getAliasesForSignerIdResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownSignerIdException">
        <soap:fault name="UnknownSignerIdException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="addConsent">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="addConsent">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="addConsentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownConsentTemplateException">
        <soap:fault name="UnknownConsentTemplateException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownModuleException">
        <soap:fault name="UnknownModuleException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidFreeTextException">
        <soap:fault name="InvalidFreeTextException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="RequirementsNotFullfilledException">
        <soap:fault name="RequirementsNotFullfilledException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="MissingRequiredObjectException">
        <soap:fault name="MissingRequiredObjectException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="MandatoryFieldsException">
        <soap:fault name="MandatoryFieldsException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="DuplicateEntryException">
        <soap:fault name="DuplicateEntryException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getTemplatesWithPolicies">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="getTemplatesWithPolicies">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getTemplatesWithPoliciesResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="refuseConsent">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="refuseConsent">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="refuseConsentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownConsentTemplateException">
        <soap:fault name="UnknownConsentTemplateException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InternalException">
        <soap:fault name="InternalException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="countConsentsForDomainWithFilter">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="countConsentsForDomainWithFilter">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="countConsentsForDomainWithFilterResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="setQCForConsent">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="setQCForConsent">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="setQCForConsentResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="UnknownSignerIdTypeException">
        <soap:fault name="UnknownSignerIdTypeException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidParameterException">
        <soap:fault name="InvalidParameterException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownConsentTemplateException">
        <soap:fault name="UnknownConsentTemplateException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidVersionException">
        <soap:fault name="InvalidVersionException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownDomainException">
        <soap:fault name="UnknownDomainException" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="UnknownConsentException">
        <soap:fault name="UnknownConsentException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="GICSServiceImplService">
    <wsdl:port binding="tns:GICSServiceImplServiceSoapBinding" name="gicsServicePort">
      <soap:address location="http://localhost:8080/gics/gicsService"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>
